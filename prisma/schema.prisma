// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Information {
  id    Int    @id
  name  String
  value String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model File {
  id   Int    @id @default(autoincrement())
  path String
  url  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  Product Product[]
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  email    String  @id
  password String
  google   Boolean

  name      String
  lastname  String
  birthdate DateTime

  gender   Gender @relation(fields: [genderId], references: [id])
  genderId Int

  Role   Role @relation(fields: [roleId], references: [id])
  roleId Int

  OrderUser     Order[] @relation("orderEmailClient")
  OrderDelivery Order[] @relation("orderEmailDeliver")

  ReportUser     Report[] @relation("reportEmailClient")
  ReportDelivery Report[] @relation("reportEmailDeliver")

  Cart    Cart[]    @relation("cartEmailClient")
  Session Session[] @relation("sessionEmailUser")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  file        File   @relation(fields: [imageId], references: [id])
  imageId     Int

  price     Float
  available Boolean
  quantity  Int

  OrderProduct OrderProduct[]
  CartProduct  CartProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  userEmail String
  user      User   @relation("cartEmailClient", fields: [userEmail], references: [email])

  CartProduct CartProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model CartProduct {
  id Int @id @default(autoincrement())

  productId Int
  product   Product @relation(fields: [productId], references: [id])

  cartId Int
  card   Cart @relation(fields: [cartId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id String @id @default(uuid())

  url    String @db.VarChar(1000)
  secret String

  total Float

  userEmail String
  client    User   @relation("orderEmailClient", fields: [userEmail], references: [email])

  deliveryEmail String
  delivery      User   @relation("orderEmailDeliver", fields: [deliveryEmail], references: [email])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  OrderStatus OrderStatus[]
  Products    OrderProduct[]
}

model OrderProduct {
  id       Int @id @default(autoincrement())
  quantity Int

  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model OrderStatus {
  id      Int    @id @default(autoincrement())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  paid      Boolean
  delivered Boolean
  location  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Report {
  id Int @id @default(autoincrement())

  userEmail String
  client    User   @relation("reportEmailClient", fields: [userEmail], references: [email])

  deliveryEmail String
  delivery      User   @relation("reportEmailDeliver", fields: [deliveryEmail], references: [email])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Session {
  id String @id @default(uuid())

  userEmail String
  user      User   @relation("sessionEmailUser", fields: [userEmail], references: [email])

  date    DateTime
  expires DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
