// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model File {
  id   Int    @id @default(autoincrement())
  path String

  Brand Brand[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Role {
  id   String @id @default(uuid())
  name String @unique
  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Gender {
  id   Int    @id @default(autoincrement())
  name String @unique
  User User[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model User {
  email    String @id
  password String

  name      String
  lastname  String
  birthdate DateTime

  gender   Gender @relation(fields: [genderId], references: [id])
  genderId Int

  Role   Role   @relation(fields: [roleId], references: [id])
  roleId String

  OrderUser     Order[] @relation("orderEmailClient")
  OrderDelivery Order[] @relation("orderEmailDeliver")

  ReportUser     Report[] @relation("reportEmailClient")
  ReportDelivery Report[] @relation("reportEmailDeliver")

  Session Session[] @relation("sessionEmailUser")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Location {
  id         Int    @id @default(autoincrement())
  coordinate String

  Brand   Brand @relation(fields: [brandId], references: [id])
  brandId Int

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  imageId Int
  image   File @relation(fields: [imageId], references: [id])

  locations Location[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  available   Boolean

  OrderProduct OrderProduct[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Order {
  id String @id @default(uuid())

  userEmail String
  client    User   @relation("orderEmailClient", fields: [userEmail], references: [email])

  deliveryEmail String
  delivery      User   @relation("orderEmailDeliver", fields: [deliveryEmail], references: [email])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  OrderStatus OrderStatus[]
  Products    OrderProduct[]
}

model OrderProduct {
  id       Int @id @default(autoincrement())
  quantity Int

  Product   Product @relation(fields: [productId], references: [id])
  productId Int

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model OrderStatus {
  id      Int    @id @default(autoincrement())
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  delivered Boolean
  location  String
}

model Report {
  id Int @id @default(autoincrement())

  userEmail String
  client    User   @relation("reportEmailClient", fields: [userEmail], references: [email])

  deliveryEmail String
  delivery      User   @relation("reportEmailDeliver", fields: [deliveryEmail], references: [email])
}

model Session {
  id String @id @default(uuid())

  userEmail String
  user      User   @relation("sessionEmailUser", fields: [userEmail], references: [email])

  date    DateTime
  expires DateTime
}
